using Core;
using Dapper;
using System.Collections.Generic;
using System.Linq;
using System.Data;

namespace persistence
{
    public class ClassesRepository : BaseRepository
    {
        public ClassesRepository(IDbConnection dbConnection) : base(dbConnection)
        {
        }

        public void Add(Classes classToAdd)
        {
            const string query = @"
                                     INSERT INTO [cla].[dbo].[Classes]
                                                ([ClassName]
                                                ,[Division])
                                            VALUES
                                                (@ClassName, @Division)
                                    ";
            EnsureDbConnectionIsOpen();
            Connection.Query(query, classToAdd); 
        }

        public void Delete(int classId)
        {
            const string query = @"
                                     DELETE FROM [cla].[dbo].[Classes]
                                            WHERE classId = @classId
                                    ";
            EnsureDbConnectionIsOpen();
            Connection.Query(query, new { classId });
        }

        public void Update(Classes classToUpdate)
        {
            const string query = @"
                                     UPDATE [cla].[dbo].[Classes]
                                           SET [ClassName] = @ClassName,
                                               [Division] = @Division
                                         WHERE classId = @ClassId
                                    ";
            EnsureDbConnectionIsOpen();
            Connection.Query(query, classToUpdate);
        }

        public IEnumerable<Classes> GetAll()
        {
            const string query = @"
                                    SELECT [ClassId]
                                          ,[ClassName]
                                          ,[Division]
                                      FROM [cla].[dbo].[Classes]
                                     ";
            EnsureDbConnectionIsOpen();
            return Connection.Query<Classes>(query);
        }

        public Classes Get(int classId)
        {
            const string query = @"
                                    SELECT [ClassId]
                                          ,[ClassName]
                                          ,[Division]
                                      FROM [cla].[dbo].[Classes] 
                                        WHERE ClassId = @classId
                                    ";

            EnsureDbConnectionIsOpen();
            return Connection.Query<Classes>(query, new { classId }).SingleOrDefault();
        }

        public string GetClassNameAndDivisionBy(int classId)
        {
            const string query = @"
                                    SELECT [ClassName]
                                          ,[Division]
                                      FROM [cla].[dbo].[Classes] 
                                        WHERE ClassId = @classId
                                    ";

            EnsureDbConnectionIsOpen();
            var course = Connection.Query<Classes>(query, new { classId }).SingleOrDefault();

            return course.ClassName + "-" + course.Division;
        }
        public string GetClassNameBy(int classId)
        {
            const string query = @"
                                    SELECT [ClassName]
                                      FROM [cla].[dbo].[Classes] 
                                        WHERE ClassId = @classId
                                    ";

            EnsureDbConnectionIsOpen();
            var course = Connection.Query<Classes>(query, new { classId }).SingleOrDefault();

            return course.ClassName;
        }
    }
}
